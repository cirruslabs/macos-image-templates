- name: Perform first "softwareupdate" invocation
  include_tasks: softwareupdate.yml

# Needed after a major macOS update, otherwise things like
# Command Line Tools won't be updated
- name: Perform second "softwareupdate" invocation
  include_tasks: softwareupdate.yml

# This one looks weird, but unfortunately there's no other way around, because Homebrew
# is not designed to run as root (see https://gist.github.com/irazasyed/7732946
# for more details).
- name: fix up /usr/local permissions for Homebrew
  file:
    path: /usr/local/share/man
    state: directory
    owner: "{{ ansible_user_id }}"
    recurse: yes
  become: yes

- name: "ensure that there are no more software updates available: check for available updates"
  command:
    cmd: "softwareupdate --all --list"
  register: software_updates_result

- name: "ensure that there are no more software updates available: parse available updates"
  set_fact:
    software_updates: "{{ software_updates_result.stdout | regex_findall('\\* Label: (.*)\\n\\tTitle: (.*), Version: (.*), Size: (.*), Recommended: (.*), Action: (.*), .*') | map('zip', ['label', 'title', 'version', 'size', 'recommended', 'action']) | map('map', 'reverse') | map('community.general.dict') }}"

- name: "ensure that there are no more software updates available: print available updates"
  debug:
    var: software_updates

- name: "ensure that there are no more software updates available: fail if some updates were not installed"
  fail:
    msg: "Found unapplied update: {{ item.label }}"
  loop: "{{ software_updates }}"
  when: "not item.label.startswith('macOS') or item.version.split('.')[0] == ansible_facts['distribution_version'].split('.')[0]"
